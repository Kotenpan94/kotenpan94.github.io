{"version":3,"sources":["logo.svg","TableEvents.js","CalEvents.js","Tab.js","Tabs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","events","EventType","StartDate","EndDate","TableEvents","style","value","field","header","sortable","textAlign","width","data","CalEvents","state","options","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","defaultView","defaultDate","left","center","right","editable","this","setState","className","Component","Tab","onClick","props","label","activeTab","Tabs","onClickTabItem","tab","children","map","child","key","require","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f9de82a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Row } from 'primereact/row';\r\nimport { Column } from 'primereact/column';\r\nimport {TabView,TabPanel} from 'primereact/tabview';\r\nimport 'primereact/resources/themes/nova-light/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\n\r\nconst events = [\r\n    { EventType:'Facility - Dragonyule',StartDate:'12-15-2019',EndDate:'12-25-2019'},\r\n    { EventType:'Raid - A Clawful Caper',StartDate:'1-1-2020',EndDate:'1-14-2020'},\r\n    { EventType:'VoidBattle - Void Agni',StartDate:'1-9-2020',EndDate:'1-14-2020'},\r\n    { EventType:'Crossover Event - Monster Hunter Collab',StartDate:'1-27-2020',EndDate:'1-9-2020'},\r\n    { EventType:'Facility - Flames of Reflection',StartDate:'1-15-2020',EndDate:'1-26-2020'}\r\n]\r\n\r\n//<div className=\"p-datatable\">\r\nfunction TableEvents(){\r\n    return (\r\n        <div style={{'border-style': 'solid', 'border-width': '4px'}}>\r\n            <DataTable value={events} >\r\n                <Column field=\"EventType\" header='Event Type' sortable={true} style={{textAlign:'right', width:'8em', 'border-style':'solid','border-color':'Black', 'border-width': '4px'}}  />\r\n                <Column field = \"StartDate\" header = \"Start\" sortable={true} style={{textAlign:'right', width:'8em','border-style':'solid','border-color':'Black', 'border-width': '4px'}} />\r\n                <Column field = \"EndDate\" header = \"End\" sortable ={true}style={{textAlign:'right', width:'8em','border-style':'solid','border-color':'Black', 'border-width': '4px'}} />\r\n            </DataTable>\r\n        </div>\r\n    );\r\n    }\r\nexport default TableEvents;\r\n\r\n","import React, {Component} from 'react';\r\nimport {FullCalendar} from 'primereact/fullcalendar';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport 'primereact/resources/themes/nova-light/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport '@fullcalendar/core/main.min.css'\r\n\r\nvar data = [ { \"id\":'Facility',\"title\":'Dragonyule Defenders',\"start\":'2019-12-15',\"end\":'2019-12-25'},\r\n{ \"id\":'Raid',\"title\":'A Clawful Caper',\"start\":'2020-01-01',\"end\":'2020-01-14'},\r\n{ \"id\":'Void Battle',\"title\":'Void Agni',\"start\":'2020-01-09',\"end\":'2020-01-15'},\r\n{ \"id\":'Crossover Event',\"title\":'Monster Hunter Collab',\"start\":'2020-01-27',\"end\":'2020-02-09'},\r\n{ \"id\":'Facility',\"title\":'Flames of Reflection',\"start\":'2020-01-16',\"end\":'2020-01-26'}\r\n];\r\n\r\nexport class CalEvents extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            events: [],\r\n            options: {\r\n                plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n                defaultView: 'dayGridMonth',\r\n                defaultDate: '2020-01-01',\r\n                header: {\r\n                    left: 'prev,next',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                },\r\n                editable: true\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({events:data});\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n            <div>\r\n                <div className=\"fc\">\r\n                    <FullCalendar  events={this.state.events} options={this.state.options} />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\t}\r\n}\r\n\r\nexport default CalEvents;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Tab extends Component {\r\n  static propTypes = {\r\n    activeTab: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: {\r\n        activeTab,\r\n        label,\r\n      },\r\n    } = this;\r\n\r\n    let className = 'tab-list-item';\r\n\r\n    if (activeTab === label) {\r\n      className += ' tab-list-active';\r\n    }\r\n\r\n    return (\r\n      <li\r\n        className={className}\r\n        onClick={onClick}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tab from './Tab';\r\n\r\nclass Tabs extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.instanceOf(Array).isRequired,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  onClickTabItem = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClickTabItem,\r\n      props: {\r\n        children,\r\n      },\r\n      state: {\r\n        activeTab,\r\n      }\r\n    } = this;\r\n\r\n    return (\r\n      <div className=\"tabs\">\r\n        <ol className=\"tab-list\">\r\n          {children.map((child) => {\r\n            const { label } = child.props;\r\n\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={label}\r\n                label={label}\r\n                onClick={onClickTabItem}\r\n              />\r\n            );\r\n          })}\r\n        </ol>\r\n        <div className=\"tab-content\">\r\n          {children.map((child) => {\r\n            if (child.props.label !== activeTab) return undefined;\r\n            return child.props.children;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;","import React, {Component} from 'react';\nimport { render } from \"react-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport TableEvents from './TableEvents';\nimport CalEvents from './CalEvents';\nimport './App.css';\nimport Tabs from './Tabs';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nrequire('./styles.css');\n\nclass App extends Component {\n  render() {\n    return (\n      <div  >\n        <h1>My Dragalia</h1>\n        <p>\n          I created My Dragalia as a way to better organize myself in one of my favorite games that I play on my phone, Dragalia Lost. It's ironic but even though the game is on my phone, I don't use any specific apps to schedule myself for the massive grind that I have to do for the game. So I had the idea of creating a website that could help me organize myself better, as I check other websites for other purposes for the game!\n        </p>\n        <Tabs>\n          <div label=\"Event Grid\">\n            <TableEvents />\n          </div>\n          <div label=\"Event Calendar\">\n            <CalEvents />\n          </div>\n        </Tabs>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}